<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Nov  7 22:04:28 2022
<BR><P>
<H3>Maximum Stack Usage =        704 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main_thread_entry &rArr; $Super$$main &rArr; UserMain &rArr; platform_log &rArr; Debug_Printf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from n32g430_it.o(.text.BusFault_Handler) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[3c]">CAN_RX0_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[3d]">CAN_RX1_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[3e]">CAN_SCE_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[3b]">CAN_TX_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[1f]">COMP_1_2_3_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[15]">DMA_Channel1_IRQHandler</a> from dma.o(.text.DMA_Channel1_IRQHandler) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[16]">DMA_Channel2_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[17]">DMA_Channel3_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[18]">DMA_Channel4_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[19]">DMA_Channel5_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[1a]">DMA_Channel6_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[1b]">DMA_Channel7_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[1c]">DMA_Channel8_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from n32g430_it.o(.text.DebugMon_Handler) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[31]">EXTI15_10_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[20]">EXTI9_5_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[2b]">I2C2_ER_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[2a]">I2C2_EV_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[33]">LPTIM_WKUP_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[1e]">MMU_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from n32g430_it.o(.text.MemManage_Handler) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from n32g430_it.o(.text.NMI_Handler) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[32]">RTCAlarm_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[c]">RTC_TAMPER_STAMP_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from n32g430_it.o(.text.SVC_Handler) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from board.o(.text.SysTick_Handler) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[40]">System_Initializes</a> from system_n32g430.o(.text.System_Initializes) referenced from startup_n32g430.o(.text)
 <LI><a href="#[21]">TIM1_BRK_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[23]">TIM1_TRG_COM_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[22]">TIM1_UP_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[25]">TIM2_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[26]">TIM3_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[27]">TIM4_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[39]">TIM5_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[3a]">TIM6_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[35]">TIM8_UP_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[30]">UART3_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[38]">UART4_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[2e]">USART1_IRQHandler</a> from usart1_rx.o(.text.USART1_IRQHandler) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[2f]">USART2_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from n32g430_it.o(.text.UsageFault_Handler) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_n32g430.o(.text) referenced from startup_n32g430.o(RESET)
 <LI><a href="#[41]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32g430.o(.text)
 <LI><a href="#[46]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[3f]">main</a> from components.o(.text.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[44]">main_thread_entry</a> from components.o(.text.main_thread_entry) referenced 2 times from components.o(.text.rt_application_init)
 <LI><a href="#[42]">rt_thread_exit</a> from thread.o(.text.rt_thread_exit) referenced 2 times from thread.o(.text._rt_thread_init)
 <LI><a href="#[45]">rt_thread_idle_entry</a> from idle.o(.text.rt_thread_idle_entry) referenced 2 times from idle.o(.text.rt_thread_idle_init)
 <LI><a href="#[43]">rt_thread_timeout</a> from thread.o(.text.rt_thread_timeout) referenced 2 times from thread.o(.text._rt_thread_init)
 <LI><a href="#[49]">rti_board_end</a> from components.o(.text.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[48]">rti_board_start</a> from components.o(.text.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[4a]">rti_end</a> from components.o(.text.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[47]">rti_start</a> from components.o(.text.rti_start) referenced from components.o(.rti_fn.0)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[41]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[183]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[184]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[185]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[186]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[187]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>COMP_1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LPTIM_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g430.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[135]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[15b]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[15c]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[188]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DMA_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[18f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[54]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[191]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[192]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[193]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[63]"></a>ADC_AHB_Clock_Mode_Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g430_adc.o(.text.ADC_AHB_Clock_Mode_Config))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock_Mode_Config
</UL>

<P><STRONG><a name="[72]"></a>ADC_Calibration_Operation</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, n32g430_adc.o(.text.ADC_Calibration_Operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Calibration_Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[6c]"></a>ADC_Channel_Sample_Time_Config</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, n32g430_adc.o(.text.ADC_Channel_Sample_Time_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Channel_Sample_Time_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[5f]"></a>ADC_Clock_Mode_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, n32g430_adc.o(.text.ADC_Clock_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Clock_Mode_Config &rArr; RCC_ADC_PLL_Clock_Prescaler_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADC_PLL_Clock_Prescaler_Enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADC_PLL_Clock_Disable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADC_Hclk_Enable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADC_Hclk_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PLL_Clock_Mode_Config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AHB_Clock_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[77]"></a>ADC_Continue_Conversion_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g430_adc.o(.text.ADC_Continue_Conversion_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initializes
</UL>

<P><STRONG><a name="[76]"></a>ADC_Continue_Conversion_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g430_adc.o(.text.ADC_Continue_Conversion_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initializes
</UL>

<P><STRONG><a name="[6e]"></a>ADC_DMA_Transfer_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g430_adc.o(.text.ADC_DMA_Transfer_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[79]"></a>ADC_Data_Alignment_Config</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g430_adc.o(.text.ADC_Data_Alignment_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Data_Alignment_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initializes
</UL>

<P><STRONG><a name="[6f]"></a>ADC_External_Trigger_Conversion_Config</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, n32g430_adc.o(.text.ADC_External_Trigger_Conversion_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_External_Trigger_Conversion_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[71]"></a>ADC_Flag_Status_Get</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, n32g430_adc.o(.text.ADC_Flag_Status_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Flag_Status_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[66]"></a>ADC_Init</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, sadc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ADC_Init &rArr; gpio_init &rArr; GPIO_Peripheral_Initialize &rArr; GPIO_Mode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB_Peripheral_Clock_Enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADC_1M_Clock_Config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Regular_Sequence_Conversion_Number_Config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Regular_Channels_Software_Conversion_Operation
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ON
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initializes_Structure
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initializes
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Flag_Status_Get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_External_Trigger_Conversion_Config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Transfer_Enable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock_Mode_Config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Sample_Time_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration_Operation
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[6b]"></a>ADC_Initializes</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, n32g430_adc.o(.text.ADC_Initializes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Initializes &rArr; ADC_Regular_Group_External_Trigger_Source_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Regular_Group_External_Trigger_Source_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Regular_Channels_Number_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Multichannels_Enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Multichannels_Disable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Data_Alignment_Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Continue_Conversion_Enable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Continue_Conversion_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[6a]"></a>ADC_Initializes_Structure</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, n32g430_adc.o(.text.ADC_Initializes_Structure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Initializes_Structure
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[75]"></a>ADC_Multichannels_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g430_adc.o(.text.ADC_Multichannels_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initializes
</UL>

<P><STRONG><a name="[74]"></a>ADC_Multichannels_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g430_adc.o(.text.ADC_Multichannels_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initializes
</UL>

<P><STRONG><a name="[70]"></a>ADC_ON</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g430_adc.o(.text.ADC_ON))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[65]"></a>ADC_PLL_Clock_Mode_Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g430_adc.o(.text.ADC_PLL_Clock_Mode_Config))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock_Mode_Config
</UL>

<P><STRONG><a name="[7a]"></a>ADC_Regular_Channels_Number_Config</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g430_adc.o(.text.ADC_Regular_Channels_Number_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Regular_Channels_Number_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initializes
</UL>

<P><STRONG><a name="[73]"></a>ADC_Regular_Channels_Software_Conversion_Operation</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, n32g430_adc.o(.text.ADC_Regular_Channels_Software_Conversion_Operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Regular_Channels_Software_Conversion_Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[78]"></a>ADC_Regular_Group_External_Trigger_Source_Config</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g430_adc.o(.text.ADC_Regular_Group_External_Trigger_Source_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Regular_Group_External_Trigger_Source_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initializes
</UL>

<P><STRONG><a name="[6d]"></a>ADC_Regular_Sequence_Conversion_Number_Config</STRONG> (Thumb, 204 bytes, Stack size 4 bytes, n32g430_adc.o(.text.ADC_Regular_Sequence_Conversion_Number_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Regular_Sequence_Conversion_Number_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[7b]"></a>AppState_Goto</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, app.o(.text.AppState_Goto))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AppState_Goto &rArr; Mop_Stop &rArr; Mop_Step_Off &rArr; Drv_Stop_All &rArr; Brush_Heater_Stop &rArr; Brush_Heater_Close &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Start
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapTester_Stop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapTester_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_GotoUser_Event
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_GotoTester_Event
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_GotoHalt_Event
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Standby_Event
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Connect_Event
</UL>

<P><STRONG><a name="[80]"></a>App_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app.o(.text.App_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_Init &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[82]"></a>App_Task</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, app.o(.text.App_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = App_Task &rArr; Iap_GotoUser_Event &rArr; Iap_Tx_Respond &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Task
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_GotoUser_Event
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_GotoTester_Event
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_GotoMcuUpdata_Event
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_GotoHalt_Event
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapTester_Task
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Standby_Event
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Disconnect_Event
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Connect_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[8d]"></a>Base_Inflow_Info_Update</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, monitor.o(.text.Base_Inflow_Info_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Base_Inflow_Info_Update &rArr; getVoterResult
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoterResult
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Task
</UL>

<P><STRONG><a name="[8f]"></a>Base_NTC_Info_Update</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, monitor.o(.text.Base_NTC_Info_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Base_NTC_Info_Update &rArr; getVoterResult
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoterResult
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Task
</UL>

<P><STRONG><a name="[e2]"></a>Brush_Fan_Info_Update</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, monitor.o(.text.Brush_Fan_Info_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Brush_Fan_Info_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Task
</UL>

<P><STRONG><a name="[90]"></a>Brush_Fan_OFF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, brush_fan.o(.text.Brush_Fan_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Brush_Fan_OFF &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pins_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_Stop
</UL>

<P><STRONG><a name="[92]"></a>Brush_Fan_ON</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, brush_fan.o(.text.Brush_Fan_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Brush_Fan_ON &rArr; GPIO_Pins_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pins_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_Start
</UL>

<P><STRONG><a name="[94]"></a>Brush_Fan_Start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, brush_fan.o(.text.Brush_Fan_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Brush_Fan_Start &rArr; Brush_Fan_ON &rArr; GPIO_Pins_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Step_Shut
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Frame_Analyze
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatBase_Rx_Frame_Analyze
</UL>

<P><STRONG><a name="[95]"></a>Brush_Fan_Stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, brush_fan.o(.text.Brush_Fan_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Brush_Fan_Stop &rArr; Brush_Fan_OFF &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Task
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Frame_Analyze
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatBase_Rx_Frame_Analyze
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Stop_All
</UL>

<P><STRONG><a name="[98]"></a>Brush_Heater_Start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, brush_heater.o(.text.Brush_Heater_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Brush_Heater_Start &rArr; Brush_Heater_Open &rArr; GPIO_Pins_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Frame_Analyze
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatBase_Rx_Frame_Analyze
</UL>

<P><STRONG><a name="[99]"></a>Brush_Heater_Stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, brush_heater.o(.text.Brush_Heater_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Brush_Heater_Stop &rArr; Brush_Heater_Close &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Step_Shut
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Frame_Analyze
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatBase_Rx_Frame_Analyze
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Stop_All
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Task
</UL>

<P><STRONG><a name="[9a]"></a>Brush_Heater_Task</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, brush_heater.o(.text.Brush_Heater_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Brush_Heater_Task &rArr; Brush_Heater_Stop &rArr; Brush_Heater_Close &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task
</UL>

<P><STRONG><a name="[9b]"></a>Bsp_DMA_Init</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, dma.o(.text.Bsp_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Bsp_DMA_Init &rArr; DMA_Initializes &rArr; DMA_Priority_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Initializes
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB_Peripheral_Clock_Enable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Interrupts_Enable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel_Request_Remap
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel_Enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[a3]"></a>Bsp_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(.text.Bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Bsp_Init &rArr; ADC_Init &rArr; gpio_init &rArr; GPIO_Peripheral_Initialize &rArr; GPIO_Mode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DMA_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[a9]"></a>Bsp_Start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp.o(.text.Bsp_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bsp_Start &rArr; TIM4_Start &rArr; TIM_On
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[126]"></a>Bsp_Task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.Bsp_Task))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g430_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>CRC8_Calc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, crc8.o(.text.CRC8_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CRC8_Calc &rArr; Crc8_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_PrintFrame
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapHeatBase_Rx_Frame_Analyze
</UL>

<P><STRONG><a name="[ad]"></a>Cal_General_TIM_CLock</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, mcu.o(.text.Cal_General_TIM_CLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Cal_General_TIM_CLock &rArr; RCC_Clocks_Frequencies_Value_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Clocks_Frequencies_Value_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[84]"></a>Comm_Connect_Event</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_event.o(.text.Comm_Connect_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Comm_Connect_Event &rArr; AppState_Goto &rArr; Mop_Stop &rArr; Mop_Step_Off &rArr; Drv_Stop_All &rArr; Brush_Heater_Stop &rArr; Brush_Heater_Close &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Goto
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[85]"></a>Comm_Disconnect_Event</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_event.o(.text.Comm_Disconnect_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Comm_Disconnect_Event &rArr; Mop_Shut &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Shut
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[ac]"></a>Crc8_Byte</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, crc8.o(.text.Crc8_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Crc8_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8_Calc
</UL>

<P><STRONG><a name="[b8]"></a>DMA_Buffer_Size_Config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Buffer_Size_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Buffer_Size_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[15]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, dma.o(.text.DMA_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DMA_Channel1_IRQHandler &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Flag_Status_Get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Flag_Status_Clear
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>DMA_Channel_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, n32g430_dma.o(.text.DMA_Channel_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Channel_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DMA_Init
</UL>

<P><STRONG><a name="[9f]"></a>DMA_Channel_Request_Remap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Channel_Request_Remap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Channel_Request_Remap
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DMA_Init
</UL>

<P><STRONG><a name="[bd]"></a>DMA_Circular_Mode_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Circular_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Circular_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[b7]"></a>DMA_Destination_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Destination_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Destination_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[b2]"></a>DMA_Flag_Status_Clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Flag_Status_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Flag_Status_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>DMA_Flag_Status_Get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, n32g430_dma.o(.text.DMA_Flag_Status_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Flag_Status_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>DMA_Initializes</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, n32g430_dma.o(.text.DMA_Initializes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Initializes &rArr; DMA_Priority_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Priority_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Peripheral_Data_Width_Config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Peripheral_Address_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Peripheral_Addr_Increment_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Memory_Data_Width_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Memory_Address_Config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Memory_Addr_Increment_Config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Memory_2_Memory_Config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Destination_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Circular_Mode_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Buffer_Size_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DMA_Init
</UL>

<P><STRONG><a name="[a0]"></a>DMA_Interrupts_Enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Interrupts_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Interrupts_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DMA_Init
</UL>

<P><STRONG><a name="[bf]"></a>DMA_Memory_2_Memory_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Memory_2_Memory_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Memory_2_Memory_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[ba]"></a>DMA_Memory_Addr_Increment_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Memory_Addr_Increment_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Memory_Addr_Increment_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[b6]"></a>DMA_Memory_Address_Config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Memory_Address_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Memory_Address_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[bc]"></a>DMA_Memory_Data_Width_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Memory_Data_Width_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Memory_Data_Width_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[b9]"></a>DMA_Peripheral_Addr_Increment_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Peripheral_Addr_Increment_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Peripheral_Addr_Increment_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[b5]"></a>DMA_Peripheral_Address_Config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Peripheral_Address_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Peripheral_Address_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[bb]"></a>DMA_Peripheral_Data_Width_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Peripheral_Data_Width_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Peripheral_Data_Width_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[be]"></a>DMA_Priority_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_dma.o(.text.DMA_Priority_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Priority_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Initializes
</UL>

<P><STRONG><a name="[9d]"></a>DMA_Reset</STRONG> (Thumb, 290 bytes, Stack size 4 bytes, n32g430_dma.o(.text.DMA_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DMA_Init
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g430_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>Debug_Printf</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, n32g43x_platform.o(.text.Debug_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Debug_Printf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_log
</UL>

<P><STRONG><a name="[c3]"></a>Drv_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv.o(.text.Drv_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[c5]"></a>Drv_Stop_All</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv.o(.text.Drv_Stop_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Stop_All &rArr; Brush_Heater_Stop &rArr; Brush_Heater_Close &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Stop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Step_Off
</UL>

<P><STRONG><a name="[c6]"></a>Drv_Task</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv.o(.text.Drv_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Drv_Task &rArr; Iap_Task &rArr; IapHeatBase_Rx_Frame_Analyze &rArr; Iap_Rx_Frame_Analyze &rArr; Iap_Tx_Respond &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Task
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Task
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[ca]"></a>GPIO_Alternate_Set</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, n32g430_gpio.o(.text.GPIO_Alternate_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Alternate_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Peripheral_Initialize
</UL>

<P><STRONG><a name="[ce]"></a>GPIO_Driver_Set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, n32g430_gpio.o(.text.GPIO_Driver_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Driver_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Peripheral_Initialize
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_Mode_Set</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, n32g430_gpio.o(.text.GPIO_Mode_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Mode_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Peripheral_Initialize
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_Peripheral_Initialize</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, n32g430_gpio.o(.text.GPIO_Peripheral_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_Peripheral_Initialize &rArr; GPIO_Mode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SlewRate_Set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pull_Set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Mode_Set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Driver_Set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Alternate_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GPIO_Configuration
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[91]"></a>GPIO_Pins_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g430_gpio.o(.text.GPIO_Pins_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Pins_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_OFF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Close
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[93]"></a>GPIO_Pins_Set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g430_gpio.o(.text.GPIO_Pins_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Pins_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_ON
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Open
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_Pull_Set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, n32g430_gpio.o(.text.GPIO_Pull_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Pull_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Peripheral_Initialize
</UL>

<P><STRONG><a name="[cd]"></a>GPIO_SlewRate_Set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, n32g430_gpio.o(.text.GPIO_SlewRate_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SlewRate_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Peripheral_Initialize
</UL>

<P><STRONG><a name="[110]"></a>GPIO_Structure_Initialize</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, n32g430_gpio.o(.text.GPIO_Structure_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_Structure_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GPIO_Configuration
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[86]"></a>Goto_Standby_Event</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_event.o(.text.Goto_Standby_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Goto_Standby_Event &rArr; AppState_Goto &rArr; Mop_Stop &rArr; Mop_Step_Off &rArr; Drv_Stop_All &rArr; Brush_Heater_Stop &rArr; Brush_Heater_Close &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Goto
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[cf]"></a>HeatBase_Rx_Frame_Analyze</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, iap_rx.o(.text.HeatBase_Rx_Frame_Analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HeatBase_Rx_Frame_Analyze &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Stop
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapHeatBase_Rx_Frame_Analyze
</UL>

<P><STRONG><a name="[a8]"></a>IO_Init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, io.o(.text.IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = IO_Init &rArr; gpio_init &rArr; GPIO_Peripheral_Initialize &rArr; GPIO_Mode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pins_Reset
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[d1]"></a>IapHeatBase_Rx_Frame_Analyze</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, iap_rx.o(.text.IapHeatBase_Rx_Frame_Analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = IapHeatBase_Rx_Frame_Analyze &rArr; Iap_Rx_Frame_Analyze &rArr; Iap_Tx_Respond &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Frame_Analyze
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatBase_Rx_Frame_Analyze
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Task
</UL>

<P><STRONG><a name="[7f]"></a>IapTester_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iaptester.o(.text.IapTester_Start))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Goto
</UL>

<P><STRONG><a name="[7d]"></a>IapTester_Stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iaptester.o(.text.IapTester_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Goto
</UL>

<P><STRONG><a name="[8c]"></a>IapTester_Task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iaptester.o(.text.IapTester_Task))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[dc]"></a>Iap_Copy_Data</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, iap_tx.o(.text.Iap_Copy_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Iap_Copy_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Respond
</UL>

<P><STRONG><a name="[88]"></a>Iap_GotoHalt_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_event.o(.text.Iap_GotoHalt_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Iap_GotoHalt_Event &rArr; Iap_Tx_Respond &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Goto
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Respond
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[8a]"></a>Iap_GotoMcuUpdata_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_event.o(.text.Iap_GotoMcuUpdata_Event))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[89]"></a>Iap_GotoTester_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_event.o(.text.Iap_GotoTester_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Iap_GotoTester_Event &rArr; Iap_Tx_Respond &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Goto
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Respond
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[87]"></a>Iap_GotoUser_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_event.o(.text.Iap_GotoUser_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Iap_GotoUser_Event &rArr; Iap_Tx_Respond &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Goto
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Respond
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[c4]"></a>Iap_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iap.o(.text.Iap_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Init
</UL>

<P><STRONG><a name="[d4]"></a>Iap_PrintArray</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(.text.Iap_PrintArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Iap_PrintArray &rArr; USART1_PrintArray &rArr; USART1_Printc &rArr; USART_Flag_Status_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PrintArray
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_PrintFrame
</UL>

<P><STRONG><a name="[d6]"></a>Iap_PrintFrame</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, iap_tx.o(.text.Iap_PrintFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Iap_PrintFrame &rArr; Iap_PrintArray &rArr; USART1_PrintArray &rArr; USART1_Printc &rArr; USART_Flag_Status_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_PrintArray
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Respond
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Request
</UL>

<P><STRONG><a name="[d7]"></a>Iap_Rx_Byte_Analyze</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, iap_rx.o(.text.Iap_Rx_Byte_Analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Iap_Rx_Byte_Analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Rx_Byte_Isr
</UL>

<P><STRONG><a name="[d8]"></a>Iap_Rx_Clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iap_rx.o(.text.Iap_Rx_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Task
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Byte_Analyze
</UL>

<P><STRONG><a name="[d2]"></a>Iap_Rx_Frame_Analyze</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, iap_rx.o(.text.Iap_Rx_Frame_Analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Iap_Rx_Frame_Analyze &rArr; Iap_Tx_Respond &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Respond
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Stop
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapHeatBase_Rx_Frame_Analyze
</UL>

<P><STRONG><a name="[c7]"></a>Iap_Task</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, iap.o(.text.Iap_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Iap_Task &rArr; IapHeatBase_Rx_Frame_Analyze &rArr; Iap_Rx_Frame_Analyze &rArr; Iap_Tx_Respond &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Request
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Clear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapHeatBase_Rx_Frame_Analyze
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task
</UL>

<P><STRONG><a name="[d9]"></a>Iap_Tx_Request</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, iap_tx.o(.text.Iap_Tx_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Iap_Tx_Request &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_PrintFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Task
</UL>

<P><STRONG><a name="[d3]"></a>Iap_Tx_Respond</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, iap_tx.o(.text.Iap_Tx_Respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Iap_Tx_Respond &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_PrintFrame
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Copy_Data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_GotoUser_Event
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_GotoTester_Event
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_GotoHalt_Event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Frame_Analyze
</UL>

<P><STRONG><a name="[de]"></a>Log_Init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, n32g43x_platform.o(.text.Log_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Log_Init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[a4]"></a>Mcu_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mcu.o(.text.Mcu_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mcu_Init &rArr; RCC_Configuration &rArr; RCC_APB2_Peripheral_Clock_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g430_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>Monitor_Task</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, monitor.o(.text.Monitor_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Monitor_Task &rArr; Base_NTC_Info_Update &rArr; getVoterResult
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_Info_Update
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base_NTC_Info_Update
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base_Inflow_Info_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task
</UL>

<P><STRONG><a name="[e3]"></a>Mop_Error</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mop.o(.text.Mop_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Mop_Error &rArr; Mop_Step_Off &rArr; Drv_Stop_All &rArr; Brush_Heater_Stop &rArr; Brush_Heater_Close &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Step_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Task
</UL>

<P><STRONG><a name="[af]"></a>Mop_Shut</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mop.o(.text.Mop_Shut))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Mop_Shut &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Step_Shut
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Disconnect_Event
</UL>

<P><STRONG><a name="[7e]"></a>Mop_Start</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mop.o(.text.Mop_Start))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Goto
</UL>

<P><STRONG><a name="[e4]"></a>Mop_Step_Off</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mop.o(.text.Mop_Step_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mop_Step_Off &rArr; Drv_Stop_All &rArr; Brush_Heater_Stop &rArr; Brush_Heater_Close &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Stop_All
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Error
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Stop
</UL>

<P><STRONG><a name="[e5]"></a>Mop_Step_Shut</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mop.o(.text.Mop_Step_Shut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mop_Step_Shut &rArr; Brush_Fan_Start &rArr; Brush_Fan_ON &rArr; GPIO_Pins_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_Start
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Shut
</UL>

<P><STRONG><a name="[7c]"></a>Mop_Stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mop.o(.text.Mop_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Mop_Stop &rArr; Mop_Step_Off &rArr; Drv_Stop_All &rArr; Brush_Heater_Stop &rArr; Brush_Heater_Close &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Step_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Goto
</UL>

<P><STRONG><a name="[8b]"></a>Mop_Task</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, mop.o(.text.Mop_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Mop_Task &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Error
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Fan_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g430_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>NVIC_Configuration</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(.text.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Vector_Table_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Vector_Table_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[a1]"></a>NVIC_Initializes</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, misc.o(.text.NVIC_Initializes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Initializes
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DMA_Init
</UL>

<P><STRONG><a name="[e7]"></a>NVIC_Vector_Table_Set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, misc.o(.text.NVIC_Vector_Table_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Vector_Table_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[f7]"></a>PLL_TrimValueLoad</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, system_n32g430.o(.text.PLL_TrimValueLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PLL_TrimValueLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Clock_Set
</UL>

<P><STRONG><a name="[69]"></a>RCC_ADC_1M_Clock_Config</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, n32g430_rcc.o(.text.RCC_ADC_1M_Clock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_ADC_1M_Clock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[62]"></a>RCC_ADC_Hclk_Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g430_rcc.o(.text.RCC_ADC_Hclk_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ADC_Hclk_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock_Mode_Config
</UL>

<P><STRONG><a name="[60]"></a>RCC_ADC_Hclk_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g430_rcc.o(.text.RCC_ADC_Hclk_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock_Mode_Config
</UL>

<P><STRONG><a name="[61]"></a>RCC_ADC_PLL_Clock_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g430_rcc.o(.text.RCC_ADC_PLL_Clock_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock_Mode_Config
</UL>

<P><STRONG><a name="[64]"></a>RCC_ADC_PLL_Clock_Prescaler_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g430_rcc.o(.text.RCC_ADC_PLL_Clock_Prescaler_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ADC_PLL_Clock_Prescaler_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Clock_Mode_Config
</UL>

<P><STRONG><a name="[68]"></a>RCC_AHB_Peripheral_Clock_Enable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g430_rcc.o(.text.RCC_AHB_Peripheral_Clock_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_AHB_Peripheral_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DMA_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[f8]"></a>RCC_APB1_Peripheral_Clock_Enable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g430_rcc.o(.text.RCC_APB1_Peripheral_Clock_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_APB1_Peripheral_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[e8]"></a>RCC_APB2_Peripheral_Clock_Enable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g430_rcc.o(.text.RCC_APB2_Peripheral_Clock_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_APB2_Peripheral_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[ae]"></a>RCC_Clocks_Frequencies_Value_Get</STRONG> (Thumb, 462 bytes, Stack size 28 bytes, n32g430_rcc.o(.text.RCC_Clocks_Frequencies_Value_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_Clocks_Frequencies_Value_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Baud_Rate_Config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_General_TIM_CLock
</UL>

<P><STRONG><a name="[e1]"></a>RCC_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mcu.o(.text.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_Configuration &rArr; RCC_APB2_Peripheral_Clock_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2_Peripheral_Clock_Enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB_Peripheral_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[df]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Init
</UL>

<P><STRONG><a name="[ea]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[eb]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, segger_rtt.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[e0]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[ef]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 828 bytes, Stack size 152 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g430_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>System_Initializes</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, system_n32g430.o(.text.System_Initializes))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = System_Initializes &rArr; System_Clock_Set &rArr; PLL_TrimValueLoad
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Clock_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>TIM2_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tim2.o(.text.TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TIM2_Init &rArr; Cal_General_TIM_CLock &rArr; RCC_Clocks_Frequencies_Value_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_On
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1_Peripheral_Clock_Enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_General_TIM_CLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[a6]"></a>TIM4_Init</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, tim4.o(.text.TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TIM4_Init &rArr; Cal_General_TIM_CLock &rArr; RCC_Clocks_Frequencies_Value_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Output_Channel4_Preload_Set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Output_Channel4_Initialize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Auto_Reload_Preload_Enable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1_Peripheral_Clock_Enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_General_TIM_CLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[aa]"></a>TIM4_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tim4.o(.text.TIM4_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM4_Start &rArr; TIM_On
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_On
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start
</UL>

<P><STRONG><a name="[fd]"></a>TIM_Auto_Reload_Preload_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, n32g430_tim.o(.text.TIM_Auto_Reload_Preload_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_Auto_Reload_Preload_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
</UL>

<P><STRONG><a name="[100]"></a>TIM_Base_Auto_Reload_Set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Base_Auto_Reload_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_Auto_Reload_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[104]"></a>TIM_Base_Channel1</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Base_Channel1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_Channel1
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[106]"></a>TIM_Base_Channel2</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Base_Channel2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_Channel2
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[107]"></a>TIM_Base_Channel3</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Base_Channel3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_Channel3
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[108]"></a>TIM_Base_Channel4</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Base_Channel4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_Channel4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[fe]"></a>TIM_Base_Count_Mode_Set</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, n32g430_tim.o(.text.TIM_Base_Count_Mode_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_Count_Mode_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[f9]"></a>TIM_Base_Initialize</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, n32g430_tim.o(.text.TIM_Base_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_Base_Initialize &rArr; TIM_Base_Count_Mode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Clock_Division_Set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Repeat_Count_Set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Reload_Mode_Set
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Prescaler_Set
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_OCrefClear
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Count_Mode_Set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Channel4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Channel3
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Channel2
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Channel1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Auto_Reload_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[105]"></a>TIM_Base_OCrefClear</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Base_OCrefClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_OCrefClear
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[101]"></a>TIM_Base_Prescaler_Set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Base_Prescaler_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_Prescaler_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[103]"></a>TIM_Base_Reload_Mode_Set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Base_Reload_Mode_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_Reload_Mode_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[102]"></a>TIM_Base_Repeat_Count_Set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Base_Repeat_Count_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_Repeat_Count_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[109]"></a>TIM_Capture_Compare_Ch_Disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Capture_Compare_Ch_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Capture_Compare_Ch_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Output_Channel4_Initialize
</UL>

<P><STRONG><a name="[10b]"></a>TIM_Capture_Compare_Ch_Enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Capture_Compare_Ch_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Capture_Compare_Ch_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Output_Channel4_Initialize
</UL>

<P><STRONG><a name="[10e]"></a>TIM_Capture_Compare_Ch_N_Disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Capture_Compare_Ch_N_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Capture_Compare_Ch_N_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Output_Channel4_Initialize
</UL>

<P><STRONG><a name="[10d]"></a>TIM_Capture_Compare_Ch_N_Enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Capture_Compare_Ch_N_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Capture_Compare_Ch_N_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Output_Channel4_Initialize
</UL>

<P><STRONG><a name="[ff]"></a>TIM_Clock_Division_Set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Clock_Division_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Clock_Division_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_Initialize
</UL>

<P><STRONG><a name="[fa]"></a>TIM_On</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, n32g430_tim.o(.text.TIM_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_On
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[fb]"></a>TIM_Output_Channel4_Initialize</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, n32g430_tim.o(.text.TIM_Output_Channel4_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_Output_Channel4_Initialize &rArr; TIM_Output_Channel_Polarity_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Output_Channel_Polarity_Set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Output_Channel_N_Polarity_Set
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Capture_Compare_Ch_N_Enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Capture_Compare_Ch_N_Disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Capture_Compare_Ch_Enable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Capture_Compare_Ch_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
</UL>

<P><STRONG><a name="[fc]"></a>TIM_Output_Channel4_Preload_Set</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g430_tim.o(.text.TIM_Output_Channel4_Preload_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Output_Channel4_Preload_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
</UL>

<P><STRONG><a name="[10c]"></a>TIM_Output_Channel_N_Polarity_Set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, n32g430_tim.o(.text.TIM_Output_Channel_N_Polarity_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Output_Channel_N_Polarity_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Output_Channel4_Initialize
</UL>

<P><STRONG><a name="[10a]"></a>TIM_Output_Channel_Polarity_Set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, n32g430_tim.o(.text.TIM_Output_Channel_Polarity_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Output_Channel_Polarity_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Output_Channel4_Initialize
</UL>

<P><STRONG><a name="[127]"></a>U32_Add_One</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, number.o(.text.U32_Add_One))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = U32_Add_One
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[2e]"></a>USART1_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usart1_rx.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; USART1_Rx_Byte_Isr &rArr; Iap_Rx_Byte_Analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Status_Get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Status_Clear
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Data_Receive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Rx_Byte_Isr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>USART1_Init</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, usart1.o(.text.USART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USART1_Init &rArr; USART_Initializes &rArr; USART_Baud_Rate_Config &rArr; RCC_Clocks_Frequencies_Value_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Initializes
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Structure_Initializes
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrput_Enable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initializes
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Transfer_Enable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2_Peripheral_Clock_Enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel_Enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[d5]"></a>USART1_PrintArray</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, usart1_tx.o(.text.USART1_PrintArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART1_PrintArray &rArr; USART1_Printc &rArr; USART_Flag_Status_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Printc
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_PrintArray
</UL>

<P><STRONG><a name="[11a]"></a>USART1_Printc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usart1_tx.o(.text.USART1_Printc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_Printc &rArr; USART_Flag_Status_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Flag_Status_Get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PrintArray
</UL>

<P><STRONG><a name="[113]"></a>USART1_Rx_Byte_Isr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(.text.USART1_Rx_Byte_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_Rx_Byte_Isr &rArr; Iap_Rx_Byte_Analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Byte_Analyze
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>USART_Baud_Rate_Config</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, n32g430_usart.o(.text.USART_Baud_Rate_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Baud_Rate_Config &rArr; RCC_Clocks_Frequencies_Value_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Clocks_Frequencies_Value_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initializes
</UL>

<P><STRONG><a name="[117]"></a>USART_DMA_Transfer_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32g430_usart.o(.text.USART_DMA_Transfer_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DMA_Transfer_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[112]"></a>USART_Data_Receive</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, n32g430_usart.o(.text.USART_Data_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_Data_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>USART_Data_Send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32g430_usart.o(.text.USART_Data_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Printc
</UL>

<P><STRONG><a name="[119]"></a>USART_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, n32g430_usart.o(.text.USART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[11c]"></a>USART_Flag_Status_Get</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, n32g430_usart.o(.text.USART_Flag_Status_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_Flag_Status_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Printc
</UL>

<P><STRONG><a name="[122]"></a>USART_Hardware_Flow_Control_Config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, n32g430_usart.o(.text.USART_Hardware_Flow_Control_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_Hardware_Flow_Control_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initializes
</UL>

<P><STRONG><a name="[116]"></a>USART_Initializes</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, n32g430_usart.o(.text.USART_Initializes))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART_Initializes &rArr; USART_Baud_Rate_Config &rArr; RCC_Clocks_Frequencies_Value_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Word_Length_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Stop_Bits_Config
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Parity_Config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Mode_Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Hardware_Flow_Control_Config
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Baud_Rate_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[118]"></a>USART_Interrput_Enable</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, n32g430_usart.o(.text.USART_Interrput_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_Interrput_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[114]"></a>USART_Interrupt_Status_Clear</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, n32g430_usart.o(.text.USART_Interrupt_Status_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_Interrupt_Status_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>USART_Interrupt_Status_Get</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, n32g430_usart.o(.text.USART_Interrupt_Status_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_Interrupt_Status_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>USART_Mode_Config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, n32g430_usart.o(.text.USART_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initializes
</UL>

<P><STRONG><a name="[120]"></a>USART_Parity_Config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, n32g430_usart.o(.text.USART_Parity_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_Parity_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initializes
</UL>

<P><STRONG><a name="[11f]"></a>USART_Stop_Bits_Config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, n32g430_usart.o(.text.USART_Stop_Bits_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_Stop_Bits_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initializes
</UL>

<P><STRONG><a name="[115]"></a>USART_Structure_Initializes</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, n32g430_usart.o(.text.USART_Structure_Initializes))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_Structure_Initializes
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[11e]"></a>USART_Word_Length_Config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, n32g430_usart.o(.text.USART_Word_Length_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_Word_Length_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initializes
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g430_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g430.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>UserMain</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, usermain.o(.text.UserMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = UserMain &rArr; platform_log &rArr; Debug_Printf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_log
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Task
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U32_Add_One
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[15a]"></a>__rt_ffs</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, kservice.o(.text.__rt_ffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[8e]"></a>getVoterResult</STRONG> (Thumb, 238 bytes, Stack size 20 bytes, monitor.o(.text.getVoterResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getVoterResult
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base_NTC_Info_Update
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base_Inflow_Info_Update
</UL>

<P><STRONG><a name="[67]"></a>gpio_init</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, io.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gpio_init &rArr; GPIO_Peripheral_Initialize &rArr; GPIO_Mode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Structure_Initialize
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Peripheral_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[136]"></a>$Super$$main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = $Super$$main &rArr; UserMain &rArr; platform_log &rArr; Debug_Printf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[44]"></a>main_thread_entry</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, components.o(.text.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; UserMain &rArr; platform_log &rArr; Debug_Printf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text.rt_application_init)
</UL>
<P><STRONG><a name="[128]"></a>platform_log</STRONG> (Thumb, 66 bytes, Stack size 160 bytes, n32g43x_platform.o(.text.platform_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = platform_log &rArr; Debug_Printf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[13b]"></a>rt_application_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, components.o(.text.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[144]"></a>rt_components_board_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, components.o(.text.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[137]"></a>rt_components_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, components.o(.text.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[13e]"></a>rt_enter_critical</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, scheduler.o(.text.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[13f]"></a>rt_exit_critical</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, scheduler.o(.text.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[db]"></a>rt_free</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, mem.o(.text.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Respond
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Request
</UL>

<P><STRONG><a name="[142]"></a>rt_hw_board_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, board.o(.text.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[c2]"></a>rt_hw_console_output</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtt_finsh.o(.text.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = rt_hw_console_output &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
</UL>

<P><STRONG><a name="[4d]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cpuport.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_hw_hard_fault_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[12d]"></a>rt_hw_stack_init</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, cpuport.o(.text.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[b0]"></a>rt_interrupt_enter</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel1_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b4]"></a>rt_interrupt_leave</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel1_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[da]"></a>rt_malloc</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, mem.o(.text.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Respond
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Request
</UL>

<P><STRONG><a name="[81]"></a>rt_mb_create</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ipc.o(.text.rt_mb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[83]"></a>rt_mb_recv</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, ipc.o(.text.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rt_mb_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[d0]"></a>rt_mb_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(.text.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Shut
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mop_Task
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Rx_Frame_Analyze
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatBase_Rx_Frame_Analyze
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Task
</UL>

<P><STRONG><a name="[153]"></a>rt_mb_send_wait</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, ipc.o(.text.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[12c]"></a>rt_memset</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, kservice.o(.text.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[14c]"></a>rt_object_allocate</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, object.o(.text.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[14d]"></a>rt_object_delete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, object.o(.text.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[158]"></a>rt_object_detach</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(.text.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_object_detach &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[154]"></a>rt_object_get_information</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, object.o(.text.rt_object_get_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[159]"></a>rt_object_init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, object.o(.text.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[16a]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(.text.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_object_is_systemobject
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[140]"></a>rt_schedule</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, scheduler.o(.text.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[15d]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_list_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[15f]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[124]"></a>rt_sem_create</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ipc.o(.text.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[162]"></a>rt_sem_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[b3]"></a>rt_sem_release</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>rt_sem_take</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ipc.o(.text.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[179]"></a>rt_show_version</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(.text.rt_show_version))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[dd]"></a>rt_sprintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, kservice.o(.text.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iap_Tx_Respond
</UL>

<P><STRONG><a name="[155]"></a>rt_strncpy</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, kservice.o(.text.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[143]"></a>rt_system_heap_init</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, mem.o(.text.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[164]"></a>rt_system_scheduler_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_system_scheduler_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[166]"></a>rt_system_scheduler_start</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_system_scheduler_start &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[168]"></a>rt_system_timer_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(.text.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_system_timer_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[17a]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[13c]"></a>rt_thread_create</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, thread.o(.text.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[42]"></a>rt_thread_exit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._rt_thread_init)
</UL>
<P><STRONG><a name="[16c]"></a>rt_thread_idle_excute</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, idle.o(.text.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[16f]"></a>rt_thread_idle_init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, idle.o(.text.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[170]"></a>rt_thread_init</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, thread.o(.text.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[146]"></a>rt_thread_resume</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>

<P><STRONG><a name="[14e]"></a>rt_thread_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread.o(.text.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[13d]"></a>rt_thread_startup</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[148]"></a>rt_thread_suspend</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[43]"></a>rt_thread_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._rt_thread_init)
</UL>
<P><STRONG><a name="[173]"></a>rt_thread_yield</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[14f]"></a>rt_tick_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[f5]"></a>rt_tick_increase</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, clock.o(.text.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[175]"></a>rt_timer_check</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[150]"></a>rt_timer_control</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_control
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[169]"></a>rt_timer_detach</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[12e]"></a>rt_timer_init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[151]"></a>rt_timer_start</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, timer.o(.text.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_timer_start &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[172]"></a>rt_timer_stop</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, timer.o(.text.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[c1]"></a>rt_vsnprintf</STRONG> (Thumb, 1480 bytes, Stack size 96 bytes, kservice.o(.text.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
</UL>

<P><STRONG><a name="[163]"></a>rt_vsprintf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kservice.o(.text.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[5e]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(.text.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[194]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[195]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[196]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[138]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_log
</UL>

<P><STRONG><a name="[197]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[198]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[199]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f6]"></a>System_Clock_Set</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, system_n32g430.o(.text.System_Clock_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = System_Clock_Set &rArr; PLL_TrimValueLoad
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_TrimValueLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initializes
</UL>

<P><STRONG><a name="[e9]"></a>_DoInit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, segger_rtt.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[ec]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, segger_rtt.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[ee]"></a>_WriteBlocking</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, segger_rtt.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[ed]"></a>_WriteNoCheck</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, segger_rtt.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[f1]"></a>_PrintInt</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, segger_rtt_printf.o(.text._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[f2]"></a>_PrintUnsigned</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, segger_rtt_printf.o(.text._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[f0]"></a>_StoreChar</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, segger_rtt_printf.o(.text._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[10f]"></a>USART1_GPIO_Configuration</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, usart1.o(.text.USART1_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART1_GPIO_Configuration &rArr; GPIO_Peripheral_Initialize &rArr; GPIO_Mode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Structure_Initialize
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Peripheral_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[96]"></a>Brush_Heater_Close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, brush_heater.o(.text.Brush_Heater_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Brush_Heater_Close &rArr; GPIO_Pins_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pins_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Stop
</UL>

<P><STRONG><a name="[97]"></a>Brush_Heater_Open</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, brush_heater.o(.text.Brush_Heater_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Brush_Heater_Open &rArr; GPIO_Pins_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pins_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Heater_Start
</UL>

<P><STRONG><a name="[49]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[48]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[4a]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[47]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[16d]"></a>_has_defunct_thread</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, idle.o(.text._has_defunct_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[16e]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, idle.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[45]"></a>rt_thread_idle_entry</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, idle.o(.text.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[145]"></a>rt_ipc_list_resume</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ipc.o(.text.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[147]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ipc.o(.text.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[14a]"></a>rt_ipc_object_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(.text.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_ipc_object_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[14b]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ipc.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[149]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipc.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[152]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ipc.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[13a]"></a>divide</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, kservice.o(.text.divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = divide
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[139]"></a>print_number</STRONG> (Thumb, 612 bytes, Stack size 72 bytes, kservice.o(.text.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[178]"></a>skip_atoi</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, kservice.o(.text.skip_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[141]"></a>plug_holes</STRONG> (Thumb, 226 bytes, Stack size 12 bytes, mem.o(.text.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[156]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, object.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[157]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, object.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[165]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, scheduler.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[15e]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scheduler.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[161]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, scheduler.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[160]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, scheduler.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[12a]"></a>_rt_thread_init</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, thread.o(.text._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[133]"></a>_thread_cleanup_execute</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, thread.o(.text._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[12b]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, thread.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[16b]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, thread.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[174]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, thread.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[171]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, thread.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[12f]"></a>_rt_timer_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, timer.o(.text._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _rt_timer_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[131]"></a>_rt_timer_remove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(.text._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[130]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, timer.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[177]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[176]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, timer.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[132]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, timer.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[f3]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, board.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[f4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, board.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[17d]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17c]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[180]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[46]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
